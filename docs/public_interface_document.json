{
  "package_name": "com.digital_product.todo_app_to_track_daily_r",
  "project_description": "A comprehensive daily task tracking Flutter application featuring CRUD operations for Todo items with local persistent storage. The app provides a clean, structured user experience with startup initialization, home screen interactions, and dedicated todo management screens. Key features include creating, editing, deleting, and marking todos as complete, with robust error handling and input validation.",
  "architecture_overview": "Implemented using Stacked architecture with a clear separation of concerns between views, view models, and services. Utilizes dependency injection via service locator, custom dialog and bottom sheet management, and reactive state management. The architecture supports modular design with centralized services for todo management, routing, and UI utilities.",
  "files": [
    {
      "name": "lib/app/app.dart",
      "description": "Defines the app structure using StackedApp annotation for routes, dependencies, bottom sheets, and dialogs. It includes routes (HomeView, StartupView), services (BottomSheetService, DialogService, NavigationService), bottom sheets (NoticeSheet), and dialogs (InfoAlertDialog). The file structure allows for easy addition of new services, routes, bottom sheets, and dialogs using the @stacked-import, @stacked-route, @stacked-service, @stacked-bottom-sheet, and @stacked-dialog annotations.",
      "class_diagram": "@startuml\nclass App\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked_annotations.dart",
        "package:stacked_services/stacked_services.dart",
        "package:my_app/ui/bottom_sheets/notice/notice_sheet.dart",
        "package:my_app/ui/dialogs/info_alert/info_alert_dialog.dart",
        "package:my_app/features/home/home_view.dart",
        "package:my_app/features/startup/startup_view.dart"
      ]
    },
    {
      "name": "lib/app/app.bottomsheets.dart",
      "description": "This file is responsible for managing the bottom sheet UI in the Flutter application. It sets up the custom bottom sheet builders for different types of bottom sheets, allowing the application to display various types of bottom sheets as needed.",
      "class_diagram": "@startuml\n\nclass BottomSheetService {\n  + setCustomSheetBuilders(builders: Map<BottomSheetType, SheetBuilder>)\n}\n\nclass BottomSheetType {\n  + notice\n}\n\ninterface SheetBuilder {\n  + (context: BuildContext, request: SheetRequest, completer: SheetCompleter)\n}\n\nclass NoticeSheet {\n  + (request: SheetRequest, completer: SheetCompleter)\n}\n\nBottomSheetService --> BottomSheetType\nBottomSheetService --> SheetBuilder\nNoticeSheet .> SheetBuilder\n\n@enduml",
      "methods": [
        {
          "name": "setupBottomSheetUi",
          "description": "Sets up the custom bottom sheet builders for different types of bottom sheets, allowing the application to display various types of bottom sheets as needed.",
          "parameters": [
            "None"
          ],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "my_app/app/app.locator.dart",
        "my_app/ui/bottom_sheets/notice/notice_sheet.dart",
        "stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/app/app.router.dart",
      "description": "This file is responsible for managing the navigation and routing within the Flutter application. It defines the available routes, the corresponding views, and provides utility methods to navigate between these views.",
      "class_diagram": "@startuml\nclass Routes {\n  +static const homeView: String\n  +static const startupView: String\n  +static const all: Set<String>\n}\n\nclass StackedRouter extends RouterBase {\n  +List<RouteDef> get routes()\n  +Map<Type, StackedRouteFactory> get pagesMap()\n}\n\nclass NavigatorStateExtension on NavigationService {\n  +Future<dynamic> navigateToHomeView(...)\n  +Future<dynamic> navigateToStartupView(...)\n  +Future<dynamic> replaceWithHomeView(...)\n  +Future<dynamic> replaceWithStartupView(...)\n}\n@enduml",
      "methods": [
        {
          "name": "navigateToHomeView",
          "description": "Navigates to the HomeView screen.",
          "parameters": [
            "int?",
            "bool",
            "Map<String, String>?",
            "Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)?"
          ],
          "return_type": "Future<dynamic>"
        },
        {
          "name": "navigateToStartupView",
          "description": "Navigates to the StartupView screen.",
          "parameters": [
            "int?",
            "bool",
            "Map<String, String>?",
            "Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)?"
          ],
          "return_type": "Future<dynamic>"
        },
        {
          "name": "replaceWithHomeView",
          "description": "Replaces the current route with the HomeView screen.",
          "parameters": [
            "int?",
            "bool",
            "Map<String, String>?",
            "Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)?"
          ],
          "return_type": "Future<dynamic>"
        },
        {
          "name": "replaceWithStartupView",
          "description": "Replaces the current route with the StartupView screen.",
          "parameters": [
            "int?",
            "bool",
            "Map<String, String>?",
            "Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)?"
          ],
          "return_type": "Future<dynamic>"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:my_app/ui/views/home/home_view.dart",
        "package:my_app/ui/views/startup/startup_view.dart",
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/services/analytic_service.dart",
      "description": "The AnalyticService class is a wrapper for analytics functionality in the application. It encapsulates the implementation of analytics tracking and provides a centralized interface for managing analytics-related operations.",
      "class_diagram": "@startuml\nclass AnalyticService {\n  + init(): Future<void>\n}\n@enduml",
      "methods": [
        {
          "name": "init",
          "description": "Initializes the AnalyticService, preparing it for use.",
          "parameters": null,
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "package:stacked/stacked_annotations.dart"
      ]
    },
    {
      "name": "lib/ui/common/app_colors.dart",
      "description": "This Dart file defines a set of reusable color constants that represent the primary color palette of the application. These colors are used throughout the UI to ensure a consistent and branded visual experience.",
      "class_diagram": "",
      "methods": [],
      "dependencies": [
        "package:flutter/material.dart"
      ]
    },
    {
      "name": "lib/ui/bottom_sheets/notice/notice_sheet_model.dart",
      "description": "The NoticeSheetModel class is responsible for managing the state and behavior of the notice bottom sheet UI component in the application. It provides the core functionality and business logic for displaying and interacting with the notice sheet.",
      "class_diagram": "@startuml\nclass NoticeSheetModel {\n  +showNotice()\n  +dismissNotice()\n  +isLoading : bool\n  +noticeMessage : String\n}\n@enduml",
      "methods": [
        {
          "name": "showNotice",
          "description": "Displays the notice bottom sheet with the specified message.",
          "parameters": [
            "message"
          ],
          "return_type": "void"
        },
        {
          "name": "dismissNotice",
          "description": "Dismisses the currently displayed notice bottom sheet.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/ui/common/ui_helpers.dart",
      "description": "This Dart file provides a collection of common UI helper functions and constants that are used throughout the Flutter application's user interface. It serves as a centralized location for managing and accessing various UI-related utilities, ensuring consistency and reusability across the codebase.",
      "class_diagram": "@startuml\nclass UIHelpers {\n  + const horizontalSpaceTiny: Widget\n  + const horizontalSpaceSmall: Widget\n  + const horizontalSpaceMedium: Widget\n  + const horizontalSpaceLarge: Widget\n  + const verticalSpaceTiny: Widget\n  + const verticalSpaceSmall: Widget\n  + const verticalSpaceMedium: Widget\n  + const verticalSpaceLarge: Widget\n  + const verticalSpaceMassive: Widget\n  + const spacedDivider: Widget\n  + verticalSpace(height: double): Widget\n  + screenWidth(context: BuildContext): double\n  + screenHeight(context: BuildContext): double\n  + screenHeightFraction(context: BuildContext, dividedBy: int, offsetBy: double, max: double): double\n  + screenWidthFraction(context: BuildContext, dividedBy: int, offsetBy: double, max: double): double\n  + halfScreenWidth(context: BuildContext): double\n  + thirdScreenWidth(context: BuildContext): double\n  + quarterScreenWidth(context: BuildContext): double\n  + getResponsiveHorizontalSpaceMedium(context: BuildContext): double\n  + getResponsiveSmallFontSize(context: BuildContext): double\n  + getResponsiveMediumFontSize(context: BuildContext): double\n  + getResponsiveLargeFontSize(context: BuildContext): double\n  + getResponsiveExtraLargeFontSize(context: BuildContext): double\n  + getResponsiveMassiveFontSize(context: BuildContext): double\n  + getResponsiveFontSize(context: BuildContext, fontSize: double, max: double): double\n}\n@enduml",
      "methods": [
        {
          "name": "horizontalSpaceTiny",
          "description": "A constant Widget that provides a tiny horizontal space.",
          "parameters": null,
          "return_type": "Widget"
        },
        {
          "name": "verticalSpace",
          "description": "A function that creates a Widget with a specified vertical space.",
          "parameters": [
            "height"
          ],
          "return_type": "Widget"
        },
        {
          "name": "screenWidth",
          "description": "A function that returns the width of the screen.",
          "parameters": [
            "context"
          ],
          "return_type": "double"
        },
        {
          "name": "getResponsiveFontSize",
          "description": "A function that calculates a responsive font size based on the screen width.",
          "parameters": [
            "context",
            "fontSize",
            "max"
          ],
          "return_type": "double"
        }
      ],
      "dependencies": [
        "dart:math",
        "package:flutter/material.dart"
      ]
    },
    {
      "name": "lib/ui/bottom_sheets/notice/notice_sheet.dart",
      "description": "The NoticeSheet class is responsible for displaying a bottom sheet with a notice or alert message to the user. It is part of the UI layer of the application and is used to present important information or updates to the user in a modal dialog.",
      "class_diagram": "@startuml\n  class NoticeSheet {\n    + NoticeSheet({required this.completer, required this.request})\n    + Widget builder(BuildContext context, NoticeSheetModel viewModel, Widget? child)\n    + NoticeSheetModel viewModelBuilder(BuildContext context)\n  }\n\n  class NoticeSheetModel {\n    # NoticeSheetModel()\n  }\n\n  NoticeSheet --> NoticeSheetModel\n  @enduml",
      "methods": [
        {
          "name": "builder",
          "description": "Builds the UI of the NoticeSheet, which includes the title, description, and any other relevant content.",
          "parameters": [
            "BuildContext context",
            "NoticeSheetModel viewModel",
            "Widget? child"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Provides an instance of the NoticeSheetModel, which is used to manage the state and logic of the NoticeSheet.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "NoticeSheetModel"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:my_app/ui/bottom_sheets/notice/notice_sheet_model.dart",
        "package:my_app/ui/common/app_colors.dart",
        "package:my_app/ui/common/ui_helpers.dart",
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/ui/dialogs/info_alert/info_alert_dialog_model.dart",
      "description": "This Dart file contains the `InfoAlertDialogModel` class, which is responsible for managing the state and behavior of an information alert dialog in a Flutter application.",
      "class_diagram": "@startuml\nclass InfoAlertDialogModel {\n}\nInfoAlertDialogModel -[hidden]- BaseViewModel\n@enduml",
      "methods": [
        {
          "name": "InfoAlertDialogModel",
          "description": "The constructor for the `InfoAlertDialogModel` class.",
          "parameters": null,
          "return_type": null
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/ui/views/home/home_view.dart",
      "description": "The `HomeView` class is responsible for rendering the main UI of the application's home screen. It provides a simple interface for displaying a counter value and allowing the user to interact with the screen by incrementing the counter, showing a dialog, or displaying a bottom sheet.",
      "class_diagram": "@startuml\nclass HomeView {\n  +builder(BuildContext, HomeViewModel, Widget?): Widget\n  +viewModelBuilder(BuildContext): HomeViewModel\n}\n\nclass HomeViewModel {\n  +incrementCounter(): void\n  +showDialog(): void\n  +showBottomSheet(): void\n  +counterLabel: String\n}\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "Builds the UI of the home screen, including the counter display, increment button, dialog button, and bottom sheet button.",
          "parameters": [
            "BuildContext",
            "HomeViewModel",
            "Widget?"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Provides an instance of the `HomeViewModel` to be used by the `HomeView`.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "HomeViewModel"
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "gap/gap.dart",
        "my_app/ui/views/home/home_viewmodel.dart",
        "stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/ui/views/home/home_viewmodel.dart",
      "description": "The HomeViewModel class is responsible for managing the state and behavior of the home screen in the application. It provides the core functionality for handling the counter value and displaying it, as well as providing methods to show a custom dialog and a bottom sheet.",
      "class_diagram": "@startuml\nclass HomeViewModel {\n  - _dialogService: DialogService\n  - _bottomSheetService: BottomSheetService\n  - _counter: int\n  + counterLabel: String\n  + incrementCounter(): void\n  + showDialog(): void\n  + showBottomSheet(): void\n}\n@enduml",
      "methods": [
        {
          "name": "counterLabel",
          "description": "Returns a string representation of the current counter value.",
          "parameters": null,
          "return_type": "String"
        },
        {
          "name": "incrementCounter",
          "description": "Increments the counter value and rebuilds the UI.",
          "parameters": null,
          "return_type": "void"
        },
        {
          "name": "showDialog",
          "description": "Displays a custom dialog with a title and description.",
          "parameters": null,
          "return_type": "void"
        },
        {
          "name": "showBottomSheet",
          "description": "Displays a custom bottom sheet with a title and description.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "my_app/app/app.bottomsheets.dart",
        "my_app/app/app.dialogs.dart",
        "my_app/app/app.locator.dart",
        "stacked/stacked.dart",
        "stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/ui/views/startup/startup_view.dart",
      "description": "The `StartupView` class in this file is responsible for the initial startup screen of the application. It is the main entry point for the user when they launch the app, displaying the app's logo and a loading indicator while the app's startup logic is being executed.",
      "class_diagram": "@startuml\nclass StartupView {\n  + builder(BuildContext, StartupViewModel, Widget?): Widget\n  + viewModelBuilder(BuildContext): StartupViewModel\n  + onViewModelReady(StartupViewModel): void\n}\n\nclass StartupViewModel {\n  + runStartupLogic(): void\n}\n\nStartupView --> StartupViewModel\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "Builds the UI for the startup screen, displaying the app's logo and a loading indicator.",
          "parameters": [
            "BuildContext",
            "StartupViewModel",
            "Widget?"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Provides an instance of the `StartupViewModel` to be used by the `StartupView`.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "StartupViewModel"
        },
        {
          "name": "onViewModelReady",
          "description": "Called when the `StartupViewModel` is ready, triggering the execution of the app's startup logic.",
          "parameters": [
            "StartupViewModel"
          ],
          "return_type": null
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "flutter/scheduler.dart",
        "gap/gap.dart",
        "my_app/ui/views/startup/startup_viewmodel.dart",
        "stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/ui/views/startup/startup_viewmodel.dart",
      "description": "The StartupViewModel class is responsible for handling the initial startup logic of the application. It is responsible for delaying the application launch by a few seconds and then navigating to the home view, which is the main entry point of the application.",
      "class_diagram": "@startuml\n  class StartupViewModel {\n    -_navigationService : NavigationService\n    +runStartupLogic() : Future\n  }\n  @enduml",
      "methods": [
        {
          "name": "runStartupLogic",
          "description": "This method is responsible for the core startup logic of the application. It delays the application launch by 3 seconds and then navigates to the home view using the NavigationService.",
          "parameters": [
            "None"
          ],
          "return_type": "Future"
        }
      ],
      "dependencies": [
        "my_app/app/app.locator.dart",
        "my_app/app/app.router.dart",
        "stacked/stacked.dart",
        "stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/utils/const/const.dart",
      "description": "This file contains a set of constant values and data structures that are used throughout the application. It serves as a centralized repository for global configuration and settings, providing a consistent and easily accessible way to manage application-wide constants.",
      "class_diagram": "@startuml\n' Enumerations and Constants\npublicConstant totalOnboarding : int\npublicConstant onBoardingHeaderTag : String\npublicConstant pathCompliantStatement : String\npublicConstant pathTermsOfServices : String\npublicConstant defaultContactEmail : String\npublicConstant defaultContactPhone : String\npublicConstant introYoutubeId : String\npublicConstant defaultLanguagesList : List<Map<String, String>>\n@enduml",
      "methods": [],
      "dependencies": []
    },
    {
      "name": "lib/ui/dialogs/info_alert/info_alert_dialog.dart",
      "description": "This file defines an InfoAlertDialog class, which is responsible for displaying an informative alert dialog with a title, description, and a confirmation button. The primary purpose of this class is to provide a reusable and customizable way to present important information to the user within the application.",
      "class_diagram": "@startuml\nclass InfoAlertDialog {\n  -DialogRequest request\n  -Function(DialogResponse) completer\n  +builder(BuildContext, InfoAlertDialogModel, Widget?): Widget\n  +viewModelBuilder(BuildContext): InfoAlertDialogModel\n}\n\nclass InfoAlertDialogModel {\n}\n\nInfoAlertDialog *-- InfoAlertDialogModel\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "The main build method that constructs the UI for the InfoAlertDialog. It takes the DialogRequest, DialogResponse completer, and the view model as input and returns the final widget.",
          "parameters": [
            "BuildContext",
            "InfoAlertDialogModel",
            "Widget?"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "A method that creates and returns an instance of the InfoAlertDialogModel, which is used to manage the state and logic of the dialog.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "InfoAlertDialogModel"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:my_app/ui/common/app_colors.dart",
        "package:my_app/ui/common/ui_helpers.dart",
        "package:my_app/ui/dialogs/info_alert/info_alert_dialog_model.dart",
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/app/app.locator.dart",
      "description": "This file is responsible for setting up and managing the service locator in a Flutter application built using the Stacked architecture pattern. The service locator is a crucial component that allows different parts of the application to access and interact with various services and dependencies, promoting a modular and decoupled design.",
      "class_diagram": "",
      "methods": [
        {
          "name": "setupLocator",
          "description": "This method is responsible for registering the necessary services and dependencies with the service locator. It allows the application to access and use these services throughout the codebase.",
          "parameters": [
            "environment",
            "environmentFilter"
          ],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "stacked_services/src/bottom_sheet/bottom_sheet_service.dart",
        "stacked_services/src/dialog/dialog_service.dart",
        "stacked_services/src/navigation/navigation_service.dart",
        "stacked_shared/stacked_shared.dart"
      ]
    },
    {
      "name": "lib/app/app.dialogs.dart",
      "description": "This file is responsible for setting up and managing the dialog system used throughout the application. It defines the available dialog types, registers the custom dialog builders, and provides a centralized way to interact with the dialog service.",
      "class_diagram": "@startuml\n'Hide the stereotype since it is the default for class\n'hide circle\n'hide methods\n'skinparam classAttributeIconSize 0\n\nclass DialogType {\n  infoAlert\n}\n\nclass DialogBuilder {\n  (BuildContext, DialogRequest, DialogCompleter) => Widget\n}\n\nclass DialogService {\n  + registerCustomDialogBuilders(Map<DialogType, DialogBuilder>)\n}\n\n'Relationships\nDialogType *-- DialogBuilder : builds\nDialogService o-- DialogBuilder : uses\n\n@enduml",
      "methods": [
        {
          "name": "setupDialogUi",
          "description": "Configures the dialog service by registering the custom dialog builders for each dialog type.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "my_app/app/app.locator.dart",
        "my_app/ui/dialogs/info_alert/info_alert_dialog.dart",
        "stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/main.dart",
      "description": "Application entry point responsible for initializing the Flutter app, setting up core configurations, and handling global error management for a daily task tracking application",
      "class_diagram": "@startuml\nclass MainApplication {\n  +void main()\n  -void runZonedGuarded()\n}\n@enduml",
      "methods": [
        {
          "name": "main",
          "description": "Primary application initialization method that sets up app configurations, dependency injection, and launches the main app view",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "dart:async",
        "package:flutter/material.dart",
        "package:flutter/services.dart",
        "app.bottomsheets.dart",
        "app.dialogs.dart",
        "app.locator.dart",
        "features/app/app_view.dart"
      ]
    },
    {
      "name": "lib/ui/views/todo/widgets/todo_item.dart",
      "description": "A reusable UI widget for rendering individual todo list items with interactive capabilities like toggling completion, editing, and deleting tasks",
      "class_diagram": "@startuml\nclass TodoItem {\n  -Todo todo\n  -Function(String) onToggle\n  -Function(String) onDelete\n  -Function(Todo) onEdit\n  +build(BuildContext context): Widget\n}\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Constructs the visual representation of a todo item with checkbox, title, description, due date, and action buttons",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "models/todo.dart",
        "ui/common/app_colors.dart",
        "ui/common/ui_helpers.dart"
      ]
    },
    {
      "name": "lib/ui/views/todo/todo_view.dart",
      "description": "A Flutter view for managing daily todo tasks, providing a user interface for creating, viewing, editing, and deleting todos with error handling and loading states",
      "class_diagram": "@startuml\nclass TodoView {\n  +builder(BuildContext, TodoViewModel)\n  +viewModelBuilder(BuildContext)\n  +onViewModelReady(TodoViewModel)\n}\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "Constructs the main UI for the todo list, handling loading states, todo list display, and error messaging",
          "parameters": [
            "BuildContext",
            "TodoViewModel",
            "Widget"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Creates the associated ViewModel for managing todo state and operations",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "TodoViewModel"
        },
        {
          "name": "onViewModelReady",
          "description": "Initializes the ViewModel when the view is first loaded",
          "parameters": [
            "TodoViewModel"
          ],
          "return_type": null
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:stacked/stacked.dart",
        "todo_viewmodel.dart",
        "todo_list.dart"
      ]
    },
    {
      "name": "lib/features/app/app_viewmodel.dart",
      "description": "Base view model for the entire application, providing core reactive state management capabilities using the Stacked architecture pattern",
      "class_diagram": "@startuml\nclass AppViewModel {\n}\nBaseViewModel <|-- AppViewModel\n@enduml",
      "methods": [
        {
          "name": "constructor",
          "description": "Initializes the base application view model, extending BaseViewModel for reactive state management",
          "parameters": null,
          "return_type": null
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/features/home/home_viewmodel.dart",
      "description": "A ViewModel for the home screen that manages a simple counter state and provides user interaction methods for displaying dialogs and bottom sheets in a Flutter/Stacked application",
      "class_diagram": "@startuml\nclass HomeViewModel {\n  - _dialogService: DialogService\n  - _bottomSheetService: BottomSheetService\n  - _counter: int\n  + incrementCounter()\n  + showDialog()\n  + showBottomSheet()\n}\n@enduml",
      "methods": [
        {
          "name": "incrementCounter",
          "description": "Increases the counter value and triggers UI rebuild",
          "parameters": null,
          "return_type": null
        },
        {
          "name": "showDialog",
          "description": "Displays a custom info dialog with a dynamic message based on counter value",
          "parameters": null,
          "return_type": null
        },
        {
          "name": "showBottomSheet",
          "description": "Shows a custom bottom sheet with predefined content",
          "parameters": null,
          "return_type": null
        }
      ],
      "dependencies": [
        "stacked_services",
        "stacked",
        "app/app.bottomsheets.dart",
        "app/app.dialogs.dart",
        "app/app.locator.dart"
      ]
    },
    {
      "name": "lib/features/home/home_view.dart",
      "description": "A Flutter view component implementing a simple home screen with interactive elements demonstrating basic state management and UI interactions using Stacked architecture",
      "class_diagram": "@startuml\nclass HomeView {\n  +builder(context, viewModel, child)\n  +viewModelBuilder(context)\n}\nclass HomeViewModel {\n  +incrementCounter()\n  +showDialog()\n  +showBottomSheet()\n}\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "Constructs the UI layout for the home screen with a counter button, interaction buttons, and dynamic text",
          "parameters": [
            "BuildContext",
            "HomeViewModel",
            "Widget"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Creates and provides the associated ViewModel for state management",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "HomeViewModel"
        },
        {
          "name": "incrementCounter",
          "description": "Increments a counter value, demonstrating basic state manipulation",
          "parameters": null,
          "return_type": "void"
        },
        {
          "name": "showDialog",
          "description": "Triggers a dialog display, showcasing modal interaction pattern",
          "parameters": null,
          "return_type": "void"
        },
        {
          "name": "showBottomSheet",
          "description": "Displays a bottom sheet, demonstrating another modal interaction pattern",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "gap/gap.dart",
        "stacked/stacked.dart",
        "home_viewmodel.dart"
      ]
    },
    {
      "name": "lib/features/app/app_view.dart",
      "description": "Application root view responsible for setting up the global app configuration, handling navigation, and providing baseline UI/UX behaviors like text scaling and keyboard dismissal",
      "class_diagram": "@startuml\nclass AppView {\n  +build(BuildContext context)\n}\nclass _App {\n  +build(BuildContext context, AppViewModel viewModel)\n}\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Creates the root MaterialApp with global configuration for routing, navigation, and UI behaviors",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "stacked/stacked.dart",
        "stacked_services/stacked_services.dart",
        "app/app.router.dart",
        "features/app/app_viewmodel.dart"
      ]
    },
    {
      "name": "lib/features/startup/startup_viewmodel.dart",
      "description": "Manages the initial application startup flow, responsible for executing startup logic and navigating to the first screen after app launch",
      "class_diagram": "@startuml\nclass StartupViewModel {\n  -_navigationService: NavigationService\n  +runStartupLogic(): Future\n}\n@enduml",
      "methods": [
        {
          "name": "runStartupLogic",
          "description": "Handles initial application startup sequence, including delayed startup and initial navigation",
          "parameters": null,
          "return_type": "Future"
        }
      ],
      "dependencies": [
        "stacked/stacked.dart",
        "stacked_services/stacked_services.dart",
        "app/app.locator.dart",
        "app/app.router.dart"
      ]
    },
    {
      "name": "lib/features/startup/startup_view.dart",
      "description": "A startup loading screen view that initializes the application and manages the initial loading state before transitioning to the main app experience",
      "class_diagram": "@startuml\nclass StartupView {\n  +builder(context, viewModel, child)\n  +viewModelBuilder(context)\n  +onViewModelReady(viewModel)\n}\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "Renders the initial loading screen with app name and loading indicator",
          "parameters": [
            "BuildContext",
            "StartupViewModel",
            "Widget?"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Creates the StartupViewModel for managing initialization logic",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "StartupViewModel"
        },
        {
          "name": "onViewModelReady",
          "description": "Triggers startup initialization logic after view is rendered",
          "parameters": [
            "StartupViewModel"
          ],
          "return_type": null
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "flutter/scheduler.dart",
        "gap/gap.dart",
        "stacked/stacked.dart",
        "startup_viewmodel.dart"
      ]
    },
    {
      "name": "lib/services/todo_service.dart",
      "description": "A service layer for managing Todo items that abstracts repository interactions and provides business logic for CRUD operations on todos",
      "class_diagram": "@startuml\nclass TodoService {\n  -TodoRepository _repository\n  +Future<List<Todo>> getTodos()\n  +Future<void> addTodo(String, String, DateTime)\n  +Future<void> updateTodo(Todo)\n  +Future<void> deleteTodo(String)\n  +Future<void> toggleTodoCompletion(String)\n}\n@enduml",
      "methods": [
        {
          "name": "getTodos",
          "description": "Retrieves all todo items from the repository, with error handling for connection issues",
          "parameters": null,
          "return_type": "Future<List<Todo>>"
        },
        {
          "name": "addTodo",
          "description": "Creates a new todo item with validation for title, storing it in the repository",
          "parameters": [
            "title",
            "description",
            "dueDate"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "updateTodo",
          "description": "Updates an existing todo item with validation for title",
          "parameters": [
            "todo"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "deleteTodo",
          "description": "Removes a todo item from the repository by its unique identifier",
          "parameters": [
            "id"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "toggleTodoCompletion",
          "description": "Switches the completion status of a todo item",
          "parameters": [
            "id"
          ],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "todo_repository.dart",
        "todo.dart"
      ]
    },
    {
      "name": "lib/repositories/todo_repository.dart",
      "description": "A repository class that manages Todo items using local persistent storage (SharedPreferences) with CRUD operations and state management for todos",
      "class_diagram": "@startuml\nclass TodoRepository {\n  -_todoKey: String\n  +getTodos(): Future<List<Todo>>\n  +saveTodo(todo: Todo): void\n  +deleteTodo(id: String): void\n  +toggleTodoCompletion(id: String): void\n}\n@enduml",
      "methods": [
        {
          "name": "getTodos",
          "description": "Retrieves all saved Todo items from local storage, sorted by due date",
          "parameters": null,
          "return_type": "Future<List<Todo>>"
        },
        {
          "name": "saveTodo",
          "description": "Creates or updates a Todo item in local storage, handling both new and existing todos",
          "parameters": [
            "todo: Todo"
          ],
          "return_type": "void"
        },
        {
          "name": "deleteTodo",
          "description": "Removes a specific Todo item from local storage by its unique identifier",
          "parameters": [
            "id: String"
          ],
          "return_type": "void"
        },
        {
          "name": "toggleTodoCompletion",
          "description": "Toggles the completion status of a Todo item and updates its completion timestamp",
          "parameters": [
            "id: String"
          ],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "shared_preferences/shared_preferences.dart",
        "todo_app_to_track_daily_r/models/todo.dart"
      ]
    },
    {
      "name": "lib/models/todo.dart",
      "description": "A data model representing a Todo item in a task management application, providing comprehensive structure for tracking tasks with rich metadata and serialization capabilities",
      "class_diagram": "@startuml\nclass Todo {\n  +id: String\n  +title: String\n  +description: String\n  +dueDate: DateTime\n  +isCompleted: bool\n  +createdAt: DateTime\n  +completedAt: DateTime?\n  +copyWith()\n  +toJson()\n  +fromJson()\n}\n@enduml",
      "methods": [
        {
          "name": "copyWith",
          "description": "Creates a new Todo instance with optional field updates, enabling immutable state modification",
          "parameters": [
            "id",
            "title",
            "description",
            "dueDate",
            "isCompleted",
            "createdAt",
            "completedAt"
          ],
          "return_type": "Todo"
        },
        {
          "name": "toJson",
          "description": "Converts Todo instance to a JSON-compatible map for storage or transmission",
          "parameters": null,
          "return_type": "Map<String, dynamic>"
        },
        {
          "name": "fromJson",
          "description": "Constructs a Todo instance from a JSON map, enabling deserialization",
          "parameters": [
            "json"
          ],
          "return_type": "Todo"
        }
      ],
      "dependencies": [
        "package:equatable/equatable.dart"
      ]
    },
    {
      "name": "lib/ui/dialogs/todo_form/todo_form_dialog_model.dart",
      "description": "View Model for managing Todo item form state and validation, handling input processing and error tracking for creating or editing Todo items",
      "class_diagram": "@startuml\nclass TodoFormDialogModel {\n  -Todo _todo\n  -String _titleError\n  -String _descriptionError\n  -String _dueDateError\n  +bool isEditing\n  +void setTodo(Todo todo)\n  +bool validateInputs(String title, String description, DateTime dueDate)\n}\n@enduml",
      "methods": [
        {
          "name": "setTodo",
          "description": "Sets the current Todo item for editing and triggers UI update",
          "parameters": [
            "Todo?"
          ],
          "return_type": null
        },
        {
          "name": "validateInputs",
          "description": "Validates Todo form inputs and sets specific error messages for invalid fields",
          "parameters": [
            "String title",
            "String description",
            "DateTime? dueDate"
          ],
          "return_type": "bool"
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart",
        "todo_app_to_track_daily_r/models/todo.dart",
        "todo_app_to_track_daily_r/utils/const/const.dart"
      ]
    },
    {
      "name": "lib/ui/dialogs/todo_form/todo_form_dialog.dart",
      "description": "A dialog widget for creating and editing todo tasks, providing a user-friendly interface for input validation and task management within a todo tracking application",
      "class_diagram": "@startuml\nclass TodoFormDialog {\n  +request: DialogRequest\n  +completer: Function(DialogResponse)\n  +builder(context: BuildContext, viewModel: TodoFormDialogModel): Widget\n  +validateInputs(title: String, description: String, dueDate: DateTime): bool\n}\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "Constructs the todo form dialog UI with text inputs for title, description, and date selection",
          "parameters": [
            "BuildContext",
            "TodoFormDialogModel",
            "Widget?"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Creates the view model for managing todo form state and validation logic",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "TodoFormDialogModel"
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "stacked/stacked.dart",
        "stacked_services/stacked_services.dart",
        "todo_app_to_track_daily_r/ui/common/app_colors.dart",
        "todo_app_to_track_daily_r/ui/common/ui_helpers.dart",
        "todo_app_to_track_daily_r/utils/const/const.dart",
        "todo_app_to_track_daily_r/ui/dialogs/todo_form/todo_form_dialog_model.dart"
      ]
    },
    {
      "name": "lib/ui/views/todo/widgets/todo_list.dart",
      "description": "A reusable widget responsible for rendering a scrollable list of todo items, handling display and interaction with todo tasks when multiple items exist, and showing a placeholder message when no todos are present",
      "class_diagram": "@startuml\nclass TodoList {\n  - List<Todo> todos\n  - Function(String) onToggle\n  - Function(String) onDelete\n  - Function(Todo) onEdit\n  + build(BuildContext context)\n}\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Renders either an empty state message or a scrollable list of TodoItem widgets based on todo collection",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "models/todo.dart",
        "ui/views/todo/widgets/todo_item.dart"
      ]
    },
    {
      "name": "lib/ui/views/todo/todo_viewmodel.dart",
      "description": "A ViewModel for managing Todo items in a mobile application, providing core CRUD operations and state management for todo tasks using the MVVM architectural pattern",
      "class_diagram": "@startuml\nclass TodoViewModel {\n  -TodoService _todoService\n  -DialogService _dialogService\n  +List<Todo> todos\n  +Future<void> initialize()\n  +Future<void> loadTodos()\n  +Future<void> addTodo()\n  +Future<void> toggleTodoCompletion()\n  +Future<void> deleteTodo()\n}\n@enduml",
      "methods": [
        {
          "name": "initialize",
          "description": "Initializes the ViewModel by loading existing todo items",
          "parameters": null,
          "return_type": "Future<void>"
        },
        {
          "name": "loadTodos",
          "description": "Retrieves all todo items from the TodoService and updates the local state",
          "parameters": null,
          "return_type": "Future<void>"
        },
        {
          "name": "addTodo",
          "description": "Creates a new todo item with title, description, and due date",
          "parameters": [
            "title",
            "description",
            "dueDate"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "toggleTodoCompletion",
          "description": "Marks a specific todo item as complete or incomplete",
          "parameters": [
            "id"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "deleteTodo",
          "description": "Removes a specific todo item after user confirmation",
          "parameters": [
            "id"
          ],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "stacked/stacked.dart",
        "stacked_services/stacked_services.dart",
        "todo_app_to_track_daily_r/models/todo.dart",
        "todo_app_to_track_daily_r/services/todo_service.dart"
      ]
    }
  ],
  "dependencies": [
    {
      "name": "flutter",
      "version": "sdk: flutter",
      "purpose": "Flutter framework"
    },
    {
      "name": "stacked",
      "version": "^3.4.0",
      "purpose": "Stacked architecture for state management and routing"
    },
    {
      "name": "stacked_services",
      "version": "^1.1.0",
      "purpose": "Services for Stacked architecture"
    },
    {
      "name": "gap",
      "version": "^2.0.0",
      "purpose": "Creating gaps in layouts"
    }
  ],
  "sequence_diagram": "@startuml\nactor User\nparticipant AppView\nparticipant StartupView\nparticipant TodoView\nparticipant TodoViewModel\nparticipant TodoService\nparticipant TodoRepository\n\nUser -> AppView: Launch App\nAppView -> StartupView: Initialize\nStartupView -> TodoView: Navigate\nUser -> TodoView: View Todos\nTodoView -> TodoViewModel: Load Todos\nTodoViewModel -> TodoService: Get Todos\nTodoService -> TodoRepository: Retrieve Todo Items\nTodoRepository --> TodoService: Return Todos\nTodoService --> TodoViewModel: Provide Todo List\nTodoViewModel --> TodoView: Update UI\nUser -> TodoView: Add/Edit/Delete Todo\nTodoView -> TodoViewModel: Perform Action\nTodoViewModel -> TodoService: Modify Todo\nTodoService -> TodoRepository: Persist Changes\nTodoRepository --> TodoService: Confirm Update\nTodoService --> TodoViewModel: Action Complete\nTodoViewModel --> TodoView: Refresh Todo List\n@enduml",
  "state_management_flow": "Implements reactive state management using the Stacked framework's BaseViewModel. Each view has a corresponding ViewModel that manages its state, with methods for loading, adding, updating, and deleting todos. State changes trigger automatic UI updates through reactive programming principles. Dependency injection is handled via the service locator pattern, allowing seamless service and state management across the application.",
  "navigation_flow": "Navigation is managed through the Stacked router, with a clearly defined route structure. The app follows a predictable flow: launching starts with the StartupView, which then navigates to the main TodoView. Route transitions are handled by the NavigationService, enabling programmatic navigation between screens. Custom route animations and named routes support a flexible and extensible navigation architecture."
}